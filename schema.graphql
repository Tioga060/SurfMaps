"""All input for the create `SurfMap` mutation."""
input CreateSurfMapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SurfMap` to be created by this mutation."""
  surfMap: SurfMapInput!
}

"""The output of our create `SurfMap` mutation."""
type CreateSurfMapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SurfMap` that was created by this mutation."""
  surfMap: SurfMap

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SurfMap`. May be used by Relay 1."""
  surfMapEdge(
    """The method to use when ordering `SurfMap`."""
    orderBy: [SurfMapsOrderBy!] = PRIMARY_KEY_ASC
  ): SurfMapsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteSurfMapByRowId` mutation."""
input DeleteSurfMapByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteSurfMap` mutation."""
input DeleteSurfMapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurfMap` to be deleted.
  """
  id: ID!
}

"""The output of our delete `SurfMap` mutation."""
type DeleteSurfMapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SurfMap` that was deleted by this mutation."""
  surfMap: SurfMap
  deletedSurfMapId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SurfMap`. May be used by Relay 1."""
  surfMapEdge(
    """The method to use when ordering `SurfMap`."""
    orderBy: [SurfMapsOrderBy!] = PRIMARY_KEY_ASC
  ): SurfMapsEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `SurfMap`."""
  createSurfMap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurfMapInput!
  ): CreateSurfMapPayload

  """Updates a single `SurfMap` using its globally unique id and a patch."""
  updateSurfMap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurfMapInput!
  ): UpdateSurfMapPayload

  """Updates a single `SurfMap` using a unique key and a patch."""
  updateSurfMapByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurfMapByRowIdInput!
  ): UpdateSurfMapPayload

  """Deletes a single `SurfMap` using its globally unique id."""
  deleteSurfMap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurfMapInput!
  ): DeleteSurfMapPayload

  """Deletes a single `SurfMap` using a unique key."""
  deleteSurfMapByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurfMapByRowIdInput!
  ): DeleteSurfMapPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `SurfMap`."""
  allSurfMaps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SurfMap`."""
    orderBy: [SurfMapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurfMapCondition
  ): SurfMapsConnection
  surfMapByRowId(rowId: UUID!): SurfMap

  """Reads and enables pagination through a set of `SurfMap`."""
  searchMaps(
    search: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): SurfMapsConnection!

  """Reads a single `SurfMap` using its globally unique `ID`."""
  surfMap(
    """The globally unique `ID` to be used in selecting a single `SurfMap`."""
    id: ID!
  ): SurfMap
}

type SurfMap implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  tier: Int!
  mapname: String!
  author: String!
  rowId: UUID!
}

"""
A condition to be used against `SurfMap` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SurfMapCondition {
  """Checks for equality with the object’s `tier` field."""
  tier: Int

  """Checks for equality with the object’s `mapname` field."""
  mapname: String

  """Checks for equality with the object’s `author` field."""
  author: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID
}

"""An input for mutations affecting `SurfMap`"""
input SurfMapInput {
  tier: Int!
  mapname: String!
  author: String!
  rowId: UUID
}

"""
Represents an update to a `SurfMap`. Fields that are set will be updated.
"""
input SurfMapPatch {
  tier: Int
  mapname: String
  author: String
  rowId: UUID
}

"""A connection to a list of `SurfMap` values."""
type SurfMapsConnection {
  """A list of `SurfMap` objects."""
  nodes: [SurfMap]!

  """
  A list of edges which contains the `SurfMap` and cursor to aid in pagination.
  """
  edges: [SurfMapsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SurfMap` you could get from the connection."""
  totalCount: Int
}

"""A `SurfMap` edge in the connection."""
type SurfMapsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SurfMap` at the end of the edge."""
  node: SurfMap
}

"""Methods to use when ordering `SurfMap`."""
enum SurfMapsOrderBy {
  NATURAL
  TIER_ASC
  TIER_DESC
  MAPNAME_ASC
  MAPNAME_DESC
  AUTHOR_ASC
  AUTHOR_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateSurfMapByRowId` mutation."""
input UpdateSurfMapByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SurfMap` being updated.
  """
  surfMapPatch: SurfMapPatch!
  rowId: UUID!
}

"""All input for the `updateSurfMap` mutation."""
input UpdateSurfMapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurfMap` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `SurfMap` being updated.
  """
  surfMapPatch: SurfMapPatch!
}

"""The output of our update `SurfMap` mutation."""
type UpdateSurfMapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SurfMap` that was updated by this mutation."""
  surfMap: SurfMap

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SurfMap`. May be used by Relay 1."""
  surfMapEdge(
    """The method to use when ordering `SurfMap`."""
    orderBy: [SurfMapsOrderBy!] = PRIMARY_KEY_ASC
  ): SurfMapsEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
